name: GitOps IAC

on:
  push:
    branches:
      - main
      - stage
    paths:
        - infra/terraform/** 
  pull_request:
    branches:
      - main
    paths:
        - infra/terraform/** 

permissions:
  contents: read
  pull-requests: write
  checks: write

env:
  AWS_REGION: us-east-1
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  EKS_CLUSTER: gitops-eks 
jobs:
  terraform:
    name: Apply Terraform Code Changes
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./infra/terraform

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.2

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out planfile
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      
      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -parallelism=1 planfile

      - name: Update kubeconfig for EKS
        id: getconfig
        if: steps.apply.outcome == 'success'
        run: |
          echo "Checking AWS identity..."
          aws sts get-caller-identity
          
          echo "Waiting for EKS cluster to be ready..."
          aws eks wait cluster-active --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}
          
          echo "Updating kubeconfig..."
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}
          
          echo "Verifying kubeconfig..."
          kubectl config current-context
          kubectl config view --minify

      - name: Wait for nodes to be ready
        if: steps.getconfig.outcome == 'success'
        run: |
          echo "Waiting for nodes to join the cluster..."
          timeout 300 bash -c 'until kubectl get nodes 2>/dev/null; do echo "Waiting for nodes..."; sleep 10; done'
          
          echo "Waiting for nodes to be ready..."
          kubectl wait --for=condition=Ready nodes --all --timeout=300s

      - name: Test cluster access
        if: steps.getconfig.outcome == 'success'
        run: |
          echo "Cluster info:"
          kubectl cluster-info
          echo "Nodes:"
          kubectl get nodes
          echo "Pods:"
          kubectl get pods --all-namespaces

      - name: Install Ingress controller
        if: steps.getconfig.outcome == 'success'
        run: |
          echo "Installing ingress controller..."
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.3/deploy/static/provider/aws/deploy.yaml --validate=false
          
          echo "Waiting for ingress controller to be ready..."
          kubectl wait --namespace ingress-nginx \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=300s
