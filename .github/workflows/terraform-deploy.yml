name: GitOps IAC

on:
  push:
    branches:
      - main
      - stage
    paths:
        - infra/terraform/** 
  pull_request:
    branches:
      - main
    paths:
        - infra/terraform/** 
  workflow_dispatch:  # Add manual trigger
    inputs:
      action:
        description: 'Choose action to perform'
        required: true
        type: choice
        options:
        - apply
        - destroy
        default: apply

permissions:
  contents: read
  pull-requests: write
  checks: write

env:
  AWS_REGION: us-east-1
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  EKS_CLUSTER: gitops-eks 

jobs:
  terraform:
    name: ${{ github.event.inputs.action == 'destroy' && 'Destroy' || 'Apply' }} Terraform Code Changes
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./infra/terraform

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.2

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        if: github.event.inputs.action != 'destroy'

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          if [ "${{ github.event.inputs.action }}" == "destroy" ]; then
            terraform plan -destroy -no-color -input=false -out planfile
          else
            terraform plan -no-color -input=false -out planfile
          fi
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      
      - name: Terraform Apply
        id: apply
        if: |
          (github.ref == 'refs/heads/main' && github.event_name == 'push' && github.event.inputs.action != 'destroy') ||
          (github.event.inputs.action == 'apply' && github.event_name == 'workflow_dispatch')
        run: terraform apply -auto-approve -input=false -parallelism=1 planfile

      - name: Terraform Destroy
        id: destroy
        if: github.event.inputs.action == 'destroy' && github.event_name == 'workflow_dispatch'
        run: |
          echo "⚠️  DESTROYING ALL INFRASTRUCTURE ⚠️"
          echo "This will delete:"
          echo "- EKS Cluster: ${{ env.EKS_CLUSTER }}"
          echo "- VPC and all networking resources"
          echo "- Node groups and EC2 instances"
          echo "- All associated AWS resources"
          echo ""
          terraform apply -auto-approve -input=false -parallelism=1 planfile

      - name: Update kubeconfig for EKS
        id: getconfig
        if: steps.apply.outcome == 'success'
        run: |
          echo "Updating kubeconfig..."
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

      - name: Install Ingress controller
        if: steps.apply.outcome == 'success' && steps.getconfig.outcome == 'success'
        run: |
          echo "Installing ingress controller..."
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.3/deploy/static/provider/aws/deploy.yaml --validate=false

      - name: Destruction Summary
        if: steps.destroy.outcome == 'success'
        run: |
          echo "✅ Infrastructure successfully destroyed!"
          echo "All AWS resources have been cleaned up."
          echo ""
          echo "Destroyed resources:"
          echo "- EKS Cluster: ${{ env.EKS_CLUSTER }}"
          echo "- VPC and subnets"
          echo "- Security groups"
          echo "- IAM roles and policies"
          echo "- Node groups and EC2 instances"
