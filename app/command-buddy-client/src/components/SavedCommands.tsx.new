import React, { useState, useEffect } from 'react';
import { apiService, AVAILABLE_TOOLS } from '../services/apiService';

interface Command {
  id: string;
  toolName: string;
  commandText: string;
  explanation: string;
}

interface ToolCommands {
  [key: string]: Command[];
}

const SavedCommands: React.FC = () => {
  const [commands, setCommands] = useState<ToolCommands>({});
  const [loading, setLoading] = useState<boolean>(true);
  const [selectedTool, setSelectedTool] = useState<string>('');
  const [searchText, setSearchText] = useState<string>('');
  const [selectedCommand, setSelectedCommand] = useState<Command | null>(null);
  
  const tools = Object.keys(commands);
  
  useEffect(() => {
    fetchAllCommands();
  }, []);
  
  const fetchAllCommands = async () => {
    setLoading(true);
    try {
      const commandsByTool: ToolCommands = {};
      
      // For each available tool, try to get its commands
      for (const tool of AVAILABLE_TOOLS) {
        try {
          const commands = await apiService.getSavedCommands(tool);
          if (commands.length > 0) {
            commandsByTool[tool] = commands;
          }
        } catch (error) {
          console.error(`Error fetching commands for ${tool}:`, error);
        }
      }
      
      setCommands(commandsByTool);
      if (Object.keys(commandsByTool).length > 0) {
        setSelectedTool(Object.keys(commandsByTool)[0]);
      }
    } catch (error) {
      console.error('Error fetching commands:', error);
    } finally {
      setLoading(false);
    }
  };
  
  const fetchCommandsForTool = async (tool: string) => {
    if (!tool) return;
    
    setLoading(true);
    try {
      // For now, we're not implementing search in the API service
      // so we'll just get all commands for the tool
      const commands = await apiService.getSavedCommands(tool);
      
      // If there's a search text, filter the results client-side
      const filteredCommands = searchText
        ? commands.filter(cmd => 
            cmd.commandText.toLowerCase().includes(searchText.toLowerCase()) ||
            cmd.explanation.toLowerCase().includes(searchText.toLowerCase())
          )
        : commands;
      
      setCommands(prev => ({
        ...prev,
        [tool]: filteredCommands
      }));
    } catch (error) {
      console.error(`Error fetching commands for ${tool}:`, error);
    } finally {
      setLoading(false);
    }
  };
  
  const handleSearch = () => {
    if (selectedTool) {
      fetchCommandsForTool(selectedTool);
    }
  };
  
  const handleToolChange = (tool: string) => {
    setSelectedTool(tool);
    setSearchText('');
    setSelectedCommand(null);
    // If we already have the commands for this tool, don't fetch again
    if (!commands[tool]) {
      fetchCommandsForTool(tool);
    }
  };
  
  return (
    <div>
      {/* Tool selector */}
      <div className="mb-8">
        <div className="flex items-center mb-3">
          <span className="text-green-400 font-bold">$</span>
          <span className="text-green-400 ml-2 font-semibold">select_tool</span>
          <span className="text-gray-400 text-sm ml-auto">Browse saved commands</span>
        </div>
        
        {loading && tools.length === 0 ? (
          <div className="bg-gray-800/50 p-5 rounded-lg flex items-center">
            <div className="animate-spin h-5 w-5 border-2 border-green-500 border-t-transparent rounded-full mr-3"></div>
            <p className="text-green-400">Loading saved commands...</p>
          </div>
        ) : tools.length === 0 ? (
          <div className="bg-gray-800/50 p-5 rounded-lg">
            <p className="text-yellow-400">No saved commands found. Complete some quizzes and save commands to see them here.</p>
          </div>
        ) : (
          <div className="flex flex-wrap gap-3 bg-gray-800/50 p-4 rounded-lg">
            {tools.map((tool) => (
              <button
                key={tool}
                onClick={() => handleToolChange(tool)}
                className={`px-4 py-2 rounded-md flex items-center gap-2 transition-all duration-200 ${
                  selectedTool === tool
                    ? 'bg-green-700/80 text-white shadow-lg shadow-green-900/30 transform scale-105'
                    : 'bg-gray-700/80 text-gray-300 hover:bg-gray-600 hover:shadow-md'
                }`}
              >
                <span className="font-medium">{tool}</span>
                <span className="bg-gray-900/50 px-2 py-0.5 rounded-full text-xs">
                  {commands[tool]?.length || 0}
                </span>
              </button>
            ))}
          </div>
        )}
      </div>
      
      {/* Search bar */}
      {selectedTool && commands[selectedTool]?.length > 0 && (
        <div className="mb-6">
          <div className="flex items-center mb-3">
            <span className="text-green-400 font-bold">$</span>
            <span className="text-green-400 ml-2 font-semibold">search</span>
            <span className="text-gray-400 text-sm ml-auto">Filter commands</span>
          </div>
          <div className="flex">
            <input
              type="text"
              value={searchText}
              onChange={(e) => setSearchText(e.target.value)}
              onKeyDown={(e) => e.key === 'Enter' && handleSearch()}
              className="flex-1 bg-gray-800/80 text-white px-3 py-2.5 border border-gray-700/50 rounded-l-md focus:outline-none focus:ring-2 focus:ring-green-500/50 font-['Fira_Code']"
              placeholder="Search commands..."
            />
            <button
              onClick={handleSearch}
              className="bg-gray-700 text-white px-4 py-2.5 rounded-r-md hover:bg-gray-600 transition-colors"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </button>
          </div>
        </div>
      )}
      
      {/* Command list */}
      {selectedTool && (
        <div className="mb-6">
          <div className="flex items-center mb-3">
            <span className="text-green-400 font-bold">$</span>
            <span className="text-green-400 ml-2 font-semibold">commands</span>
            <span className="text-gray-400 text-sm ml-auto">
              {commands[selectedTool]?.length || 0} commands for {selectedTool}
            </span>
          </div>
          
          {loading ? (
            <div className="bg-gray-800/50 p-5 rounded-lg flex items-center">
              <div className="animate-spin h-5 w-5 border-2 border-green-500 border-t-transparent rounded-full mr-3"></div>
              <p className="text-green-400">Loading commands...</p>
            </div>
          ) : commands[selectedTool]?.length === 0 ? (
            <div className="bg-gray-800/50 p-5 rounded-lg">
              <p className="text-yellow-400">No commands found for {selectedTool}.</p>
            </div>
          ) : (
            <div className="space-y-3">
              {commands[selectedTool].map((command) => (
                <div 
                  key={command.id}
                  className={`bg-gray-800/50 p-4 rounded-lg border border-gray-700/30 hover:border-green-500/30 transition-all cursor-pointer ${
                    selectedCommand?.id === command.id ? 'border-green-500/50 shadow-md shadow-green-900/10' : ''
                  }`}
                  onClick={() => setSelectedCommand(command)}
                >
                  <div className="font-['Fira_Code'] text-green-400 mb-2 px-2 py-1 bg-gray-900/50 rounded overflow-x-auto whitespace-nowrap">
                    $ {command.commandText}
                  </div>
                  
                  {selectedCommand?.id === command.id && (
                    <div className="mt-3 text-gray-300 text-sm bg-gray-900/30 p-3 rounded border-l-2 border-green-600">
                      <p className="text-xs text-gray-400 mb-1">Explanation:</p>
                      <p>{command.explanation}</p>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default SavedCommands;
